// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/handlers/batch/handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/equinor/radix-job-scheduler/models"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// CreateBatch mocks base method.
func (m *MockHandler) CreateBatch(jobScheduleDescription *models.BatchScheduleDescription) (*models.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", jobScheduleDescription)
	ret0, _ := ret[0].(*models.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockHandlerMockRecorder) CreateBatch(jobScheduleDescription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockHandler)(nil).CreateBatch), jobScheduleDescription)
}

// DeleteBatch mocks base method.
func (m *MockHandler) DeleteBatch(jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockHandlerMockRecorder) DeleteBatch(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockHandler)(nil).DeleteBatch), jobName)
}

// GetBatch mocks base method.
func (m *MockHandler) GetBatch(name string) (*models.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", name)
	ret0, _ := ret[0].(*models.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockHandlerMockRecorder) GetBatch(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockHandler)(nil).GetBatch), name)
}

// GetBatches mocks base method.
func (m *MockHandler) GetBatches() ([]models.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatches")
	ret0, _ := ret[0].([]models.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatches indicates an expected call of GetBatches.
func (mr *MockHandlerMockRecorder) GetBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatches", reflect.TypeOf((*MockHandler)(nil).GetBatches))
}

// MaintainHistoryLimit mocks base method.
func (m *MockHandler) MaintainHistoryLimit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintainHistoryLimit")
	ret0, _ := ret[0].(error)
	return ret0
}

// MaintainHistoryLimit indicates an expected call of MaintainHistoryLimit.
func (mr *MockHandlerMockRecorder) MaintainHistoryLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintainHistoryLimit", reflect.TypeOf((*MockHandler)(nil).MaintainHistoryLimit))
}
